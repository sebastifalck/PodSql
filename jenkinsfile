def runAsDatabase(cmd) {
    return "PGPASSWORD='${DB_PASSWORD}' psql -U ${DB_USER} -h ${DB_HOST} -d ${DB_NAME} ${cmd}"
}

pipeline {
    agent any

    parameters {
        string(name: 'APP_NAME', defaultValue: 'mi-app-ejemplo', description: 'Nombre de la app a consultar')
    }

    environment {
        DB_HOST = 'localhost'
        DB_NAME = 'almdevops'
        DB_USER = 'almDevopsAdmin'
        DB_PASSWORD = 'tu_password'
    }

    stages {
        stage('Generar CSV desde la base de datos') {
            steps {
                script {
                    // 1. Obtener headers ordenados
                    def headerQuery = """
                        SELECT string_agg(column_name, ',' ORDER BY ordinal_position)
                        FROM information_schema.columns
                        WHERE table_name = 'projectinfo';
                    """

                    def rawHeaders = sh(
                        script: runAsDatabase("-t -A -c \"${headerQuery}\""),
                        returnStdout: true
                    )
                    def headers = rawHeaders.replaceAll('^\\s+|\\s+$', '')
                    def headersArray = headers.split(',') as List

                    echo "Encabezados extraídos (${headersArray.size()}): ${headers}"

                    // 2. Obtener datos por app_name
                    def app = params.APP_NAME
                    def dataQuery = """
                        SELECT * FROM projectinfo WHERE appname = '${app}';
                    """

                    def rawData = sh(
                        script: runAsDatabase("-t -A -F ',' -c \"${dataQuery}\""),
                        returnStdout: true
                    )
                    def dataLine = rawData.replaceAll('^\\s+|\\s+$', '')
                    def dataArray = dataLine.split(',', -1) as List

                    echo "Datos extraídos (${dataArray.size()}): ${dataLine}"

                    // 3. Validar cantidad de columnas
                    if (headersArray.size() != dataArray.size()) {
                        error "ERROR: Cantidad de columnas (${dataArray.size()}) no coincide con headers (${headersArray.size()})"
                    }

                    // 4. Crear mapa key:value
                    def values = [:]
                    for (int i = 0; i < headersArray.size(); i++) {
                        values[headersArray[i]] = dataArray[i]
                    }

                    // 5. Guardar valores como variables de entorno y mostrar
                    values.each { key, val ->
                        def varName = key.toUpperCase().replaceAll('[^A-Z0-9_]', '_')
                        env."${varName}" = val
                        echo "${varName} = ${env["${varName}"]}"
                    }

                    // 6. Guardar como CSV
                    def finalCSV = "${headers}\n${dataLine}"
                    writeFile file: 'result_with_headers.csv', text: finalCSV
                    echo "CSV generado correctamente como result_with_headers.csv"
                }
            }
        }

        stage('Usar valores extraídos') {
            steps {
                script {
                    echo "Ejemplo de uso - APPNAME: ${env.APPNAME}"
                    echo "Ejemplo de uso - PROYECTO: ${env.PROYECTO}"
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'result_with_headers.csv', onlyIfSuccessful: true
        }
    }
}
